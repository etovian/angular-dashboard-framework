{"version":3,"sources":["adf.js","layout-sample.js","column.js","dashboard.js","provider.js","row.js","widget-content.js","widget.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework.js"],"names":["window","undefined","AdfLayoutSampleDirective","adfTemplatePath","restrict","scope","adfStructure","bindToController","controller","AdfLayoutSampleDirectiveController","controllerAs","replace","templateUrl","vm","this","angular","extend","getColumnWidth","styleClass","map","col-md-3","col-md-4","col-md-6","col-md-8","col-md-9","col-md-12","width","getRowHeight","numberOfRows","height","toFixed","module","value","directive","$log","$compile","$rootScope","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","parseInt","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","editMode","continuousEditMode","adfModel","options","link","col","isDefined","isArray","cloned","append","$aside","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","name","unshift","transclude","collapsible","editable","maximizable","adfWidgetFilter","UserService","LocalizationService","NavigationGuardService","guardian","message","widgetFilter","structureName","sessionUser","getSessionUser","then","user","registerGuardian","localize","key","getValue","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","toggleEditMode","modelCopy","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","$new","instance","open","backdrop","placement","size","info","selectedKey","closeDialog","close","$destroy","getSelectedStructureClass","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","opts","addWidget","$attr","enableConfirmDelete","enableconfirmdelete","provider","widgetsPath","messageTemplate","loadingTemplate","reload","frameless","edit","path","template","$get","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","isString","invoke","all","locals","templateCtrl","children","data","contents","reason","msg","$on","preLink","definition","fromJson","widgetState","isCollapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","editScope","adfEditTemplatePath","editTemplateUrl","saveDialog","event","args","openFullScreen","fullScreenScope","modalSize","windowClass","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'ngAside'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '<<adfVersion>>');\n","'use strict';\n\nangular.module('adf').directive('adfLayoutSample', ['adfTemplatePath', AdfLayoutSampleDirective]);\n\nfunction AdfLayoutSampleDirective(adfTemplatePath) {\n\treturn {\n\t\trestrict: 'E',\n\t\tscope: {\n\t\t\tadfStructure: '='\n\t\t},\n\t\tbindToController: true,\n\t\tcontroller: AdfLayoutSampleDirectiveController,\n\t\tcontrollerAs: 'vm',\n\t\treplace: true,\n\t\ttemplateUrl: adfTemplatePath + 'layout-sample.html'\n\t};\n}\n\nfunction AdfLayoutSampleDirectiveController() {\n\tvar vm = this;\n\n\tangular.extend(vm, {\n\t\tgetColumnWidth: function(styleClass) {\n\n\t\t\tvar map = {\n\t\t\t\t'col-md-3': '25.00',\n\t\t\t\t'col-md-4': '33.33',\n\t\t\t\t'col-md-6': '50.00',\n\t\t\t\t'col-md-8': '66.66',\n\t\t\t\t'col-md-9': '75.00',\n\t\t\t\t'col-md-12': '100.00'\n\t\t\t};\n\n\t\t\tvar width = (map[styleClass] ? map[styleClass] : '100.00') + '%';\n\t\t\treturn width;\n\t\t},\n\t\tgetRowHeight: function(numberOfRows) {\n\n\t\t\tvar height = (60 / numberOfRows).toFixed(2);\n\t\t\treturn height;\n\t\t}\n\t});\n}","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    'use strict';\n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n      \t\t\tif (!targetColumn.widgets) {\n      \t\t\t\ttargetColumn.widgets = [];\n      \t\t\t}\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        sortable.destroy();\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $aside, dashboard, adfTemplatePath) {\n    'use strict';\n\n\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '='\n      },\n      controller: function($scope, UserService, LocalizationService, NavigationGuardService){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        $scope.sessionUser = null;\n\n        UserService.getSessionUser().then(function(user) {\n          $scope.sessionUser = user;\n        });\n\n        function guardian() {\n          var message = 'There may be unsaved changes to the page.  Are you sure you want to continue?';\n          return $scope.editMode ? message : undefined;\n        }\n        NavigationGuardService.registerGuardian(guardian);\n\n        $scope.localize = function(key) {\n          return LocalizationService.getValue(key);\n        };\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            if (!$scope.continuousEditMode) {\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\n            }\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        $scope.collapseAll = function(collapseExpandStatus){\n          $rootScope.$broadcast('adfDashboardCollapseExapand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          if (!$scope.continuousEditMode) {\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          }\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n\n          var instance = $aside.open({\n            scope: editDashboardScope,\n            templateUrl: adfTemplatePath + 'dashboard-edit.html',\n            backdrop: 'static',\n            placement: 'right',\n            size: 'sm'\n          });\n          $scope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            model.selectedKey = name;\n            changeStructure(model, structure);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n          editDashboardScope.getSelectedStructureClass = function(key) {\n            var styleClass = '';\n            if(key === model.selectedKey) {\n              styleClass = 'selected';\n            }\n            return styleClass;\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n          if(model.addTemplateUrl)\n          {\n            adfAddTemplatePath = model.addTemplateUrl;\n          }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static',\n            placement: 'right',\n            size: 'md'\n          };\n\n          var instance = $aside.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget)\n            };\n            addNewWidgetToModel(model, w, name);\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  });\n","/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    'use strict';\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n          $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget) {\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n      }\n    };\n\n  });\n","/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nangular.module('adf')\n  .directive('adfWidget', function($log, $aside, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed = false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              backdrop: 'static',\n              placement: 'right',\n              size: 'sm'\n            };\n            var instance = $aside.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static',\n            placement: 'right',\n            size: 'md'\n          };\n\n          var instance = $aside.open(opts);\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n          editScope.saveDialog = function() {\n            definition.title = editScope.definition.title;\n            angular.extend(definition.config, editScope.definition.config);\n            var widget = $scope.widget;\n            if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n            }\n            editScope.closeDialog();\n          };\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: function($scope, LocalizationService) {\n\n        $scope.$on('adfDashboardCollapseExapand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.localize = function(key) {\n          return LocalizationService.getValue(key);\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal',\n            placement: 'top'\n          };\n\n          var instance = $aside.open(opts);\n          fullScreenScope.closeDialog = function() {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n      },\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n",null,"(function(window, undefined) {'use strict';\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf', ['adf.provider', 'ui.bootstrap', 'ngAside'])\n  .value('adfTemplatePath', '../src/templates/')\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\n  .value('adfVersion', '0.11.0-SNAPSHOT');\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\n    \n\n    /**\n     * moves a widget in between a column\n     */\n    function moveWidgetInColumn($scope, column, evt){\n      var widgets = column.widgets;\n      // move widget and apply to scope\n      $scope.$apply(function(){\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\n      });\n    }\n\n    /**\n     * finds a widget by its id in the column\n     */\n    function findWidget(column, index){\n      var widget = null;\n      for (var i=0; i<column.widgets.length; i++){\n        var w = column.widgets[i];\n        if (w.wid === index){\n          widget = w;\n          break;\n        }\n      }\n      return widget;\n    }\n\n    /**\n     * finds a column by its id in the model\n     */\n    function findColumn(model, index){\n      var column = null;\n      for (var i=0; i<model.rows.length; i++){\n        var r = model.rows[i];\n        for (var j=0; j<r.columns.length; j++){\n          var c = r.columns[j];\n          if ( c.cid === index ){\n            column = c;\n            break;\n          } else if (c.rows){\n            column = findColumn(c, index);\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * get the adf id from an html element\n     */\n    function getId(el){\n      var id = el.getAttribute('adf-id');\n      return id ? parseInt(id) : -1;\n    }\n\n    /**\n     * adds a widget to a column\n     */\n    function addWidgetToColumn($scope, model, targetColumn, evt){\n      // find source column\n      var cid = getId(evt.from);\n      var sourceColumn = findColumn(model, cid);\n\n      if (sourceColumn){\n        // find moved widget\n        var wid = getId(evt.item);\n        var widget = findWidget(sourceColumn, wid);\n\n        if (widget){\n          // add new item and apply to scope\n          $scope.$apply(function(){\n      \t\t\tif (!targetColumn.widgets) {\n      \t\t\t\ttargetColumn.widgets = [];\n      \t\t\t}\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\n\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\n          });\n        } else {\n          $log.warn('could not find widget with id ' + wid);\n        }\n      } else {\n        $log.warn('could not find column with id ' + cid);\n      }\n    }\n\n    /**\n     * removes a widget from a column\n     */\n    function removeWidgetFromColumn($scope, column, evt){\n      // remove old item and apply to scope\n      $scope.$apply(function(){\n        column.widgets.splice(evt.oldIndex, 1);\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n      });\n    }\n\n    /**\n     * enable sortable\n     */\n    function applySortable($scope, $element, model, column){\n      // enable drag and drop\n      var el = $element[0];\n      var sortable = Sortable.create(el, {\n        group: 'widgets',\n        handle: '.adf-move',\n        ghostClass: 'placeholder',\n        animation: 150,\n        onAdd: function(evt){\n          addWidgetToColumn($scope, model, column, evt);\n        },\n        onRemove: function(evt){\n          removeWidgetFromColumn($scope, column, evt);\n        },\n        onUpdate: function(evt){\n          moveWidgetInColumn($scope, column, evt);\n        }\n      });\n\n      // destroy sortable on column destroy event\n      $element.on('$destroy', function () {\n        sortable.destroy();\n      });\n    }\n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        column: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        adfModel: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\n      link: function ($scope, $element) {\n        // set id\n        var col = $scope.column;\n        if (!col.cid){\n          col.cid = dashboard.id();\n        }\n\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\n          $compile(rowTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        } else {\n          // enable drag and drop for widget only columns\n          applySortable($scope, $element, $scope.adfModel, col);\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * @ngdoc directive\n * @name adf.directive:adfDashboard\n * @element div\n * @restrict EA\n * @scope\n * @description\n *\n * `adfDashboard` is a directive which renders the dashboard with all its\n * components. The directive requires a name attribute. The name of the\n * dashboard can be used to store the model.\n *\n * @param {string} name name of the dashboard. This attribute is required.\n * @param {boolean=} editable false to disable the editmode of the dashboard.\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\n * @param {string=} structure the default structure of the dashboard.\n * @param {object=} adfModel model object of the dashboard.\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\n *                   events during edit mode not reset it if edit mode is exited.\n */\n\nangular.module('adf')\n  .directive('adfDashboard', function ($rootScope, $log, $aside, dashboard, adfTemplatePath) {\n    \n\n\n\n    function stringToBoolean(string){\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\n        case 'true': case 'yes': case '1': return true;\n        case 'false': case 'no': case '0': case null: return false;\n        default: return Boolean(string);\n      }\n    }\n\n    function copyWidgets(source, target) {\n      if ( source.widgets && source.widgets.length > 0 ){\n        var w = source.widgets.shift();\n        while (w){\n          target.widgets.push(w);\n          w = source.widgets.shift();\n        }\n      }\n    }\n\n    /**\n    * Copy widget from old columns to the new model\n    * @param object root the model\n    * @param array of columns\n    * @param counter\n    */\n    function fillStructure(root, columns, counter) {\n      counter = counter || 0;\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (column) {\n            // if the widgets prop doesn't exist, create a new array for it.\n            // this allows ui.sortable to do it's thing without error\n            if (!column.widgets) {\n              column.widgets = [];\n            }\n\n            // if a column exist at the counter index, copy over the column\n            if (angular.isDefined(columns[counter])) {\n              // do not add widgets to a column, which uses nested rows\n              if (!angular.isDefined(column.rows)){\n                copyWidgets(columns[counter], column);\n                counter++;\n              }\n            }\n\n            // run fillStructure again for any sub rows/columns\n            counter = fillStructure(column, columns, counter);\n          });\n        });\n      }\n      return counter;\n    }\n\n    /**\n    * Read Columns: recursively searches an object for the 'columns' property\n    * @param object model\n    * @param array  an array of existing columns; used when recursion happens\n    */\n    function readColumns(root, columns) {\n      columns = columns || [];\n\n      if (angular.isDefined(root.rows)) {\n        angular.forEach(root.rows, function (row) {\n          angular.forEach(row.columns, function (col) {\n            columns.push(col);\n            // keep reading columns until we can't any more\n            readColumns(col, columns);\n          });\n        });\n      }\n\n      return columns;\n    }\n\n    function changeStructure(model, structure){\n      var columns = readColumns(model);\n      var counter = 0;\n\n      model.rows = angular.copy(structure.rows);\n\n      while ( counter < columns.length ){\n        counter = fillStructure(model, columns, counter);\n      }\n    }\n\n    function createConfiguration(type){\n      var cfg = {};\n      var config = dashboard.widgets[type].config;\n      if (config){\n        cfg = angular.copy(config);\n      }\n      return cfg;\n    }\n\n    /**\n     * Find first widget column in model.\n     *\n     * @param dashboard model\n     */\n    function findFirstWidgetColumn(model){\n      var column = null;\n      if (!angular.isArray(model.rows)){\n        $log.error('model does not have any rows');\n        return null;\n      }\n      for (var i=0; i<model.rows.length; i++){\n        var row = model.rows[i];\n        if (angular.isArray(row.columns)){\n          for (var j=0; j<row.columns.length; j++){\n            var col = row.columns[j];\n            if (!col.rows){\n              column = col;\n              break;\n            }\n          }\n        }\n        if (column){\n          break;\n        }\n      }\n      return column;\n    }\n\n    /**\n     * Adds the widget to first column of the model.\n     *\n     * @param dashboard model\n     * @param widget to add to model\n     * @param name name of the dashboard\n     */\n    function addNewWidgetToModel(model, widget, name){\n      if (model){\n        var column = findFirstWidgetColumn(model);\n        if (column){\n          if (!column.widgets){\n            column.widgets = [];\n          }\n          column.widgets.unshift(widget);\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\n        } else {\n          $log.error('could not find first widget column');\n        }\n      } else {\n        $log.error('model is undefined');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude : false,\n      scope: {\n        structure: '@',\n        name: '@',\n        collapsible: '@',\n        editable: '@',\n        editMode: '@',\n        continuousEditMode: '=',\n        maximizable: '@',\n        adfModel: '=',\n        adfWidgetFilter: '='\n      },\n      controller: function($scope, UserService, LocalizationService, NavigationGuardService){\n        var model = {};\n        var structure = {};\n        var widgetFilter = null;\n        var structureName = {};\n        var name = $scope.name;\n\n        $scope.sessionUser = null;\n\n        UserService.getSessionUser().then(function(user) {\n          $scope.sessionUser = user;\n        });\n\n        function guardian() {\n          var message = 'There may be unsaved changes to the page.  Are you sure you want to continue?';\n          return $scope.editMode ? message : undefined;\n        }\n        NavigationGuardService.registerGuardian(guardian);\n\n        $scope.localize = function(key) {\n          return LocalizationService.getValue(key);\n        };\n\n        // Watching for changes on adfModel\n        $scope.$watch('adfModel', function(oldVal, newVal) {\n          // has model changed or is the model attribute not set\n          if (newVal !== null || (oldVal === null && newVal === null)) {\n            model = $scope.adfModel;\n            widgetFilter = $scope.adfWidgetFilter;\n            if ( ! model || ! model.rows ){\n              structureName = $scope.structure;\n              structure = dashboard.structures[structureName];\n              if (structure){\n                if (model){\n                  model.rows = angular.copy(structure).rows;\n                } else {\n                  model = angular.copy(structure);\n                }\n                model.structure = structureName;\n              } else {\n                $log.error( 'could not find structure ' + structureName);\n              }\n            }\n\n            if (model) {\n              if (!model.title){\n                model.title = 'Dashboard';\n              }\n              if (!model.titleTemplateUrl) {\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\n              }\n              $scope.model = model;\n            } else {\n              $log.error('could not find or create model');\n            }\n          }\n        }, true);\n\n        // edit mode\n        $scope.editMode = false;\n        $scope.editClass = '';\n\n        $scope.toggleEditMode = function(){\n          $scope.editMode = ! $scope.editMode;\n          if ($scope.editMode){\n            if (!$scope.continuousEditMode) {\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\n            }\n          }\n\n          if (!$scope.editMode){\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\n          }\n        };\n\n        $scope.collapseAll = function(collapseExpandStatus){\n          $rootScope.$broadcast('adfDashboardCollapseExapand',{collapseExpandStatus : collapseExpandStatus});\n        };\n\n        $scope.cancelEditMode = function(){\n          $scope.editMode = false;\n          if (!$scope.continuousEditMode) {\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\n          }\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\n        };\n\n        // edit dashboard settings\n        $scope.editDashboardDialog = function(){\n          var editDashboardScope = $scope.$new();\n          // create a copy of the title, to avoid changing the title to\n          // \"dashboard\" if the field is empty\n          editDashboardScope.copy = {\n            title: model.title\n          };\n          editDashboardScope.structures = dashboard.structures;\n\n          var instance = $aside.open({\n            scope: editDashboardScope,\n            templateUrl: adfTemplatePath + 'dashboard-edit.html',\n            backdrop: 'static',\n            placement: 'right',\n            size: 'sm'\n          });\n          $scope.changeStructure = function(name, structure){\n            $log.info('change structure to ' + name);\n            model.selectedKey = name;\n            changeStructure(model, structure);\n          };\n          editDashboardScope.closeDialog = function(){\n            // copy the new title back to the model\n            model.title = editDashboardScope.copy.title;\n            // close modal and destroy the scope\n            instance.close();\n            editDashboardScope.$destroy();\n          };\n          editDashboardScope.getSelectedStructureClass = function(key) {\n            var styleClass = '';\n            if(key === model.selectedKey) {\n              styleClass = 'selected';\n            }\n            return styleClass;\n          };\n        };\n\n        // add widget dialog\n        $scope.addWidgetDialog = function(){\n          var addScope = $scope.$new();\n          var model = $scope.model;\n          var widgets;\n          if (angular.isFunction(widgetFilter)){\n            widgets = {};\n            angular.forEach(dashboard.widgets, function(widget, type){\n              if (widgetFilter(widget, type, model)){\n                widgets[type] = widget;\n              }\n            });\n          } else {\n            widgets = dashboard.widgets;\n          }\n          addScope.widgets = widgets;\n\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\n          if(model.addTemplateUrl)\n          {\n            adfAddTemplatePath = model.addTemplateUrl;\n          }\n\n          var opts = {\n            scope: addScope,\n            templateUrl: adfAddTemplatePath,\n            backdrop: 'static',\n            placement: 'right',\n            size: 'md'\n          };\n\n          var instance = $aside.open(opts);\n          addScope.addWidget = function(widget){\n            var w = {\n              type: widget,\n              config: createConfiguration(widget)\n            };\n            addNewWidgetToModel(model, w, name);\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n          addScope.closeDialog = function(){\n            // close and destroy\n            instance.close();\n            addScope.$destroy();\n          };\n        };\n\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\n      },\n      link: function ($scope, $element, $attr) {\n        // pass options to scope\n        var options = {\n          name: $attr.name,\n          editable: true,\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\n          maximizable: stringToBoolean($attr.maximizable),\n          collapsible: stringToBoolean($attr.collapsible)\n        };\n        if (angular.isDefined($attr.editable)){\n          options.editable = stringToBoolean($attr.editable);\n        }\n        $scope.options = options;\n      },\n      templateUrl: adfTemplatePath + 'dashboard.html'\n    };\n  });\n\n\n\nangular.module('adf').directive('adfLayoutSample', ['adfTemplatePath', AdfLayoutSampleDirective]);\n\nfunction AdfLayoutSampleDirective(adfTemplatePath) {\n\treturn {\n\t\trestrict: 'E',\n\t\tscope: {\n\t\t\tadfStructure: '='\n\t\t},\n\t\tbindToController: true,\n\t\tcontroller: AdfLayoutSampleDirectiveController,\n\t\tcontrollerAs: 'vm',\n\t\treplace: true,\n\t\ttemplateUrl: adfTemplatePath + 'layout-sample.html'\n\t};\n}\n\nfunction AdfLayoutSampleDirectiveController() {\n\tvar vm = this;\n\n\tangular.extend(vm, {\n\t\tgetColumnWidth: function(styleClass) {\n\n\t\t\tvar map = {\n\t\t\t\t'col-md-3': '25.00',\n\t\t\t\t'col-md-4': '33.33',\n\t\t\t\t'col-md-6': '50.00',\n\t\t\t\t'col-md-8': '66.66',\n\t\t\t\t'col-md-9': '75.00',\n\t\t\t\t'col-md-12': '100.00'\n\t\t\t};\n\n\t\t\tvar width = (map[styleClass] ? map[styleClass] : '100.00') + '%';\n\t\t\treturn width;\n\t\t},\n\t\tgetRowHeight: function(numberOfRows) {\n\n\t\t\tvar height = (60 / numberOfRows).toFixed(2);\n\t\t\treturn height;\n\t\t}\n\t});\n}\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\n/**\n * @ngdoc object\n * @name adf.dashboardProvider\n * @description\n *\n * The dashboardProvider can be used to register structures and widgets.\n */\nangular.module('adf.provider', [])\n  .provider('dashboard', function(){\n\n    var widgets = {};\n    var widgetsPath = '';\n    var structures = {};\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\n    var loadingTemplate = '\\\n      <div class=\"progress progress-striped active\">\\n\\\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\n          <span class=\"sr-only\">loading ...</span>\\n\\\n        </div>\\n\\\n      </div>';\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#widget\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new widget.\n    *\n    * @param {string} name of the widget\n    * @param {object} widget to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `title` - `{string=}` - The title of the widget.\n    *   - `description` - `{string=}` - Description of the widget.\n    *   - `config` - `{object}` - Predefined widget configuration.\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\n    *      associated with newly created scope of the widget or the name of a\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\n    *      if passed as a string.\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\n    *   - `template` - `{string=|function()=}` - html template as a string.\n    *   - `templateUrl` - `{string=}` - path to an html template.\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the widget\n    *      will wait for them all to be resolved or one to be rejected before the controller is\n    *      instantiated.\n    *      If all the promises are resolved successfully, the values of the resolved promises are\n    *      injected.\n    *\n    *      The map object is:\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\n    *        and the return value is treated as the dependency. If the result is a promise, it is\n    *        resolved before its value is injected into the controller.\n    *   - `edit` - `{object}` - Edit modus of the widget.\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\n    *        Default is true.\n    *\n    * @returns {Object} self\n    */\n    this.widget = function(name, widget){\n      var w = angular.extend({reload: false, frameless: false}, widget);\n      if ( w.edit ){\n        var edit = {reload: true};\n        angular.extend(edit, w.edit);\n        w.edit = edit;\n      }\n      widgets[name] = w;\n      return this;\n    };\n\n    /**\n     * @ngdoc method\n     * @name adf.dashboardProvider#widgetsPath\n     * @methodOf adf.dashboardProvider\n     * @description\n     *\n     * Sets the path to the directory which contains the widgets. The widgets\n     * path is used for widgets with a templateUrl which contains the\n     * placeholder {widgetsPath}. The placeholder is replaced with the\n     * configured value, before the template is loaded, but the template is\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\n     * The default value of widgetPaths is ''.\n     *\n     *\n     * @param {string} path to the directory which contains the widgets\n     *\n     * @returns {Object} self\n     */\n    this.widgetsPath = function(path){\n      widgetsPath = path;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#structure\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Registers a new structure.\n    *\n    * @param {string} name of the structure\n    * @param {object} structure to be registered.\n    *\n    *   Object properties:\n    *\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\n    *     - `styleClass` - `{string}` - CSS Class of the row.\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\n    *       - `styleClass` - `{string}` - CSS Class of the column.\n    *\n    * @returns {Object} self\n    */\n    this.structure = function(name, structure){\n      structures[name] = structure;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#messageTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template for messages.\n    *\n    * @param {string} template for messages.\n    *\n    * @returns {Object} self\n    */\n    this.messageTemplate = function(template){\n      messageTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc method\n    * @name adf.dashboardProvider#loadingTemplate\n    * @methodOf adf.dashboardProvider\n    * @description\n    *\n    * Changes the template which is displayed as\n    * long as the widget resources are not resolved.\n    *\n    * @param {string} template loading template\n    *\n    * @returns {Object} self\n    */\n    this.loadingTemplate = function(template){\n      loadingTemplate = template;\n      return this;\n    };\n\n   /**\n    * @ngdoc service\n    * @name adf.dashboard\n    * @description\n    *\n    * The dashboard holds all options, structures and widgets.\n    *\n    * @property {Array.<Object>} widgets Array of registered widgets.\n    * @property {string} widgetsPath Default path for widgets.\n    * @property {Array.<Object>} structures Array of registered structures.\n    * @property {string} messageTemplate Template for messages.\n    * @property {string} loadingTemplate Template for widget loading.\n    *\n    * @returns {Object} self\n    */\n    this.$get = function(){\n      var cid = 0;\n\n      return {\n        widgets: widgets,\n        widgetsPath: widgetsPath,\n        structures: structures,\n        messageTemplate: messageTemplate,\n        loadingTemplate: loadingTemplate,\n\n        /**\n         * @ngdoc method\n         * @name adf.dashboard#id\n         * @methodOf adf.dashboard\n         * @description\n         *\n         * Creates an ongoing numeric id. The method is used to create ids for\n         * columns and widgets in the dashboard.\n         */\n        id: function(){\n          return ++cid;\n        }\n      };\n    };\n\n  });\n\n/*\n* The MIT License\n*\n* Copyright (c) 2015, Sebastian Sdorra\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in\n* all copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\n\n/* global angular */\nangular.module('adf')\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\n    \n\n    return {\n      restrict: 'E',\n      replace: true,\n      scope: {\n        row: '=',\n        adfModel: '=',\n        editMode: '=',\n        continuousEditMode: '=',\n        options: '='\n      },\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\n      link: function($scope, $element) {\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\n          $compile(columnTemplate)($scope, function(cloned) {\n            $element.append(cloned);\n          });\n        }\n      }\n    };\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\n          $compile, $controller, $injector, dashboard) {\n\n    function parseUrl(url) {\n      var parsedUrl = url;\n      if (url.indexOf('{widgetsPath}') >= 0) {\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\n                .replace('//', '/');\n        if (parsedUrl.indexOf('/') === 0) {\n          parsedUrl = parsedUrl.substring(1);\n        }\n      }\n      return parsedUrl;\n    }\n\n    function getTemplate(widget) {\n      var deferred = $q.defer();\n\n      if (widget.template) {\n        deferred.resolve(widget.template);\n      } else if (widget.templateUrl) {\n        // try to fetch template from cache\n        var tpl = $templateCache.get(widget.templateUrl);\n        if (tpl) {\n          deferred.resolve(tpl);\n        } else {\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\n          $http.get(url)\n               .success(function(response) {\n                 // put response to cache, with unmodified url as key\n                 $templateCache.put(widget.templateUrl, response);\n                 deferred.resolve(response);\n               })\n               .error(function() {\n                 deferred.reject('could not load template');\n               });\n        }\n      }\n\n      return deferred.promise;\n    }\n\n    function compileWidget($scope, $element, currentScope) {\n      var model = $scope.model;\n      var content = $scope.content;\n\n      // display loading template\n      $element.html(dashboard.loadingTemplate);\n\n      // create new scope\n      var templateScope = $scope.$new();\n\n      // pass config object to scope\n      if (!model.config) {\n        model.config = {};\n      }\n\n      templateScope.config = model.config;\n\n      // local injections\n      var base = {\n        $scope: templateScope,\n        widget: model,\n        config: model.config\n      };\n\n      // get resolve promises from content object\n      var resolvers = {};\n      resolvers.$tpl = getTemplate(content);\n      if (content.resolve) {\n        angular.forEach(content.resolve, function(promise, key) {\n          if (angular.isString(promise)) {\n            resolvers[key] = $injector.get(promise);\n          } else {\n            resolvers[key] = $injector.invoke(promise, promise, base);\n          }\n        });\n      }\n\n      // resolve all resolvers\n      $q.all(resolvers).then(function(locals) {\n        angular.extend(locals, base);\n\n        // compile & render template\n        var template = locals.$tpl;\n        $element.html(template);\n        if (content.controller) {\n          var templateCtrl = $controller(content.controller, locals);\n          if (content.controllerAs) {\n            templateScope[content.controllerAs] = templateCtrl;\n          }\n          $element.children().data('$ngControllerController', templateCtrl);\n        }\n        $compile($element.contents())(templateScope);\n      }, function(reason) {\n        // handle promise rejection\n        var msg = 'Could not resolve all promises';\n        if (reason) {\n          msg += ': ' + reason;\n        }\n        $log.warn(msg);\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\n      });\n\n      // destroy old scope\n      if (currentScope) {\n        currentScope.$destroy();\n      }\n\n      return templateScope;\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      scope: {\n        model: '=',\n        content: '='\n      },\n      link: function($scope, $element) {\n        var currentScope = compileWidget($scope, $element, null);\n        $scope.$on('widgetConfigChanged', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n        $scope.$on('widgetReload', function() {\n          currentScope = compileWidget($scope, $element, currentScope);\n        });\n      }\n    };\n\n  });\n\n/*\n * The MIT License\n *\n * Copyright (c) 2015, Sebastian Sdorra\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n\nangular.module('adf')\n  .directive('adfWidget', function($log, $aside, $rootScope, dashboard, adfTemplatePath) {\n\n    function preLink($scope) {\n      var definition = $scope.definition;\n      if (definition) {\n        var w = dashboard.widgets[definition.type];\n        if (w) {\n          // pass title\n          if (!definition.title) {\n            definition.title = w.title;\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\n            if (w.titleTemplateUrl) {\n              definition.titleTemplateUrl = w.titleTemplateUrl;\n            }\n          }\n\n          if (!definition.titleTemplateUrl) {\n            definition.frameless = w.frameless;\n          }\n\n          // set id for sortable\n          if (!definition.wid) {\n            definition.wid = dashboard.id();\n          }\n\n          // pass copy of widget to scope\n          $scope.widget = angular.copy(w);\n\n          // create config object\n          var config = definition.config;\n          if (config) {\n            if (angular.isString(config)) {\n              config = angular.fromJson(config);\n            }\n          } else {\n            config = {};\n          }\n\n          // pass config to scope\n          $scope.config = config;\n\n          // collapse exposed $scope.widgetState property\n          if (!$scope.widgetState) {\n            $scope.widgetState = {};\n            $scope.widgetState.isCollapsed = false;\n          }\n\n        } else {\n          $log.warn('could not find widget ' + definition.type);\n        }\n      } else {\n        $log.debug('definition not specified, widget was probably removed');\n      }\n    }\n\n    function postLink($scope, $element) {\n      var definition = $scope.definition;\n      if (definition) {\n        // bind close function\n\n        var deleteWidget = function() {\n          var column = $scope.col;\n          if (column) {\n            var index = column.widgets.indexOf(definition);\n            if (index >= 0) {\n              column.widgets.splice(index, 1);\n            }\n          }\n          $element.remove();\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\n        };\n\n        $scope.remove = function() {\n          if ($scope.options.enableConfirmDelete) {\n            var deleteScope = $scope.$new();\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\n            if (definition.deleteTemplateUrl) {\n              deleteTemplateUrl = definition.deleteTemplateUrl;\n            }\n            var opts = {\n              scope: deleteScope,\n              templateUrl: deleteTemplateUrl,\n              backdrop: 'static',\n              placement: 'right',\n              size: 'sm'\n            };\n            var instance = $aside.open(opts);\n\n            deleteScope.closeDialog = function() {\n              instance.close();\n              deleteScope.$destroy();\n            };\n            deleteScope.deleteDialog = function() {\n              deleteWidget();\n              deleteScope.closeDialog();\n            };\n          } else {\n            deleteWidget();\n          }\n        };\n\n        // bind reload function\n        $scope.reload = function() {\n          $scope.$broadcast('widgetReload');\n        };\n\n        // bind edit function\n        $scope.edit = function() {\n          var editScope = $scope.$new();\n          editScope.definition = angular.copy(definition);\n\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\n          if (definition.editTemplateUrl) {\n            adfEditTemplatePath = definition.editTemplateUrl;\n          }\n\n          var opts = {\n            scope: editScope,\n            templateUrl: adfEditTemplatePath,\n            backdrop: 'static',\n            placement: 'right',\n            size: 'md'\n          };\n\n          var instance = $aside.open(opts);\n          editScope.closeDialog = function() {\n            instance.close();\n            editScope.$destroy();\n          };\n          editScope.saveDialog = function() {\n            definition.title = editScope.definition.title;\n            angular.extend(definition.config, editScope.definition.config);\n            var widget = $scope.widget;\n            if (widget.edit && widget.edit.reload) {\n                // reload content after edit dialog is closed\n                $scope.$broadcast('widgetConfigChanged');\n            }\n            editScope.closeDialog();\n          };\n        };\n      } else {\n        $log.debug('widget not found');\n      }\n    }\n\n    return {\n      replace: true,\n      restrict: 'EA',\n      transclude: false,\n      templateUrl: adfTemplatePath + 'widget.html',\n      scope: {\n        definition: '=',\n        col: '=column',\n        editMode: '=',\n        options: '=',\n        widgetState: '='\n      },\n      controller: function($scope, LocalizationService) {\n\n        $scope.$on('adfDashboardCollapseExapand', function(event, args) {\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\n        });\n\n        $scope.localize = function(key) {\n          return LocalizationService.getValue(key);\n        };\n\n        $scope.openFullScreen = function() {\n          var definition = $scope.definition;\n          var fullScreenScope = $scope.$new();\n          var opts = {\n            scope: fullScreenScope,\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\n            backdrop: 'static',\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal',\n            placement: 'top'\n          };\n\n          var instance = $aside.open(opts);\n          fullScreenScope.closeDialog = function() {\n            instance.close();\n            fullScreenScope.$destroy();\n          };\n        };\n      },\n      compile: function() {\n\n        /**\n         * use pre link, because link of widget-content\n         * is executed before post link widget\n         */\n        return {\n          pre: preLink,\n          post: postLink\n        };\n      }\n    };\n\n  });\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <h4 class=modal-title>{{ localize(\\'EditDashboard\\') }}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle>{{ localize(\\'Title\\') }}</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label>{{ localize(\\'Structure\\') }}</label> <fieldset> <div ng-repeat=\\\"(key, structure) in structures\\\" style=\\\"float: left;\\\"> <adf-layout-sample ng-click=\\\"changeStructure(key, structure)\\\" adf-structure=structure ng-class=\\\"getSelectedStructureClass(key, structure)\\\"></adf-layout-sample> </div> </fieldset> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary close\\\" ng-click=closeDialog()>{{ localize(\\'Close\\') }}</button> </div>\");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{ model.title }} </h1>   <div class=drawer> <div class=\\\"drawer-drawertaskbar drawertaskbar\\\"> <div class=\\\"drawertaskbar-newbutton drawer-button drawer-toggle\\\" data-cid=drawer-new> <div class=drawertaskbar-newbutton-img> <span class=\\\"fa fa-plus-square fa-lg nav-icon-color\\\"></span> </div> <span class=drawertaskbar-newbutton-text><span>New</span></span> </div> <div class=\\\"drawertaskbar-commands drawercommands\\\"> <div id=drawer-taskbar class=drawercommands-commands-contextual> <a ng-click=addWidgetDialog() ng-if=editMode class=\\\"btn btn-link btn-lg\\\"><span class=\\\"fa fa-plus\\\"></span> <div>{{ localize(\\'Add\\') }}</div> </a> <a ng-click=editDashboardDialog() ng-if=editMode class=\\\"btn btn-link btn-lg\\\"><span class=\\\"fa fa-cog\\\"></span> <div>{{ localize(\\'Edit\\') }}</div> </a> <a ng-click=cancelEditMode() ng-if=editMode class=\\\"btn btn-link btn-lg\\\"><span class=\\\"fa fa-times\\\"></span> <div>{{ localize(\\'Cancel\\') }}</div> </a> <a ng-if=sessionUser.IsAdmin ng-click=toggleEditMode() class=\\\"btn btn-link btn-lg\\\"><span class=fa x-ng-class=\\\"{\\'fa-pencil-square-o\\' : !editMode, \\'fa-check\\' : editMode}\\\"></span> <div>{{ editMode ? localize(\\'Save\\') : localize(\\'Edit\\') }}</div> </a> </div> </div> </div> </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div>\");\n$templateCache.put(\"../src/templates/layout-sample.html\",\"<div class=adf-layout-sample> <div ng-repeat=\\\"row in vm.adfStructure.rows\\\" class=clearfix> <div ng-repeat=\\\"column in row.columns\\\" class=adf-layout-sample-column style=\\\"width: {{ vm.getColumnWidth(column.styleClass) }}; height: {{ vm.getRowHeight(vm.adfStructure.rows.length) }}px;\\\"> </div> </div> </div>\");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <h4 class=modal-title>{{ localize(\\'AddNewWidget\\') }}</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary close\\\" ng-click=closeDialog()>{{ localize(\\'Close\\') }}</button> </div>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title>{{ localize(\\'Delete\\') }} {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>{{ localize(\\'DeleteWidgetConfirmation\\') }}</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default close\\\" ng-click=closeDialog()>{{ localize(\\'Close\\') }}</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog()>{{ localize(\\'Delete\\') }}</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>{{ localize(\\'Title\\') }}</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> </form> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>{{ localize(\\'Cancel\\') }}</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=saveDialog()>{{ localize(\\'Apply\\') }}</button> </div> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"fa fa-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"fa fa-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>{{ localize(\\'Close\\') }}</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"fa fa-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"fa fa-arrows\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"fa fa-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"fa fa-plus\\\"></i> </a>  <a href title=\\\"edit widget configuration\\\" ng-click=edit() ng-if=editMode> <i class=\\\"fa fa-cog\\\"></i> </a> <a href title=\\\"fullscreen widget\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"fa fa-arrows-h\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"fa fa-trash\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"{\\'panel panel-default\\':!widget.frameless || editMode}\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div>   <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\"> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");}]);})(window);"],"sourceRoot":"/source/"}